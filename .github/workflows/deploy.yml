name: deploy api

on:
    push:
        branches:
            - master
    release:
        types: [created]

env:
    REGISTRY_HOST: docker.pkg.github.com
    STAGING_URL: http://staging.journali.nl
    STAGING_SERVICE: journali-staging_api
    PRODUCTION_URL: http://journali.nl
    PRODUCTION_SERVICE: journali-production_api

jobs:
    deliver:
        runs-on: self-hosted
        steps:
            -   uses: actions/checkout@v2
            -   name: publish api docker image
                uses: elgohr/Publish-Docker-Github-Action@master
                with:
                    name: wesleyklop/journali-api/journali-api
                    username: ${{ github.actor }}
                    password: ${{ github.token }}
                    registry: ${{ env.REGISTRY_HOST }}
                    tag_semver: true
                    dockerfile: Dockerfile
    deploy:
        name: deploy to an environment
        runs-on: self-hosted
        needs: [deliver]
        steps:
            -   name: set environment variables if staging
                if: ${{ github.event_name == 'push' }}
                uses: allenevans/set-env@v1.0.0
                with:
                    SERVICE: ${{ env.STAGING_SERVICE }}
                    URL: ${{ env.STAGING_URL }}
                    ENV_NAME: staging
            -   name: set environment variables if production
                if: ${{ github.event_name == 'release' }}
                uses: allenevans/set-env@v1.0.0
                with:
                    SERVICE: ${{ env.PRODUCTION_SERVICE }}
                    URL: ${{ env.PRODUCTION_URL }}
                    ENV_NAME: production

            -   name: login to registry
                run: echo ${{ github.token }} | docker login ${{ env.REGISTRY_HOST }} -u ${{ github.actor }} --password-stdin
            -   name: start deployment
                uses: bobheadxi/deployments@master
                id: deployment
                with:
                    step: start
                    token: ${{ github.token }}
                    env: ${{ env.ENV_NAME }}
                # TODO: Migrate database
            -   name: deploy new api version
                run: docker service update --update-failure-action=rollback --with-registry-auth --force ${{ env.SERVICE }}
            -   name: update deployment status
                uses: bobheadxi/deployments@master
                if: always()
                with:
                    step: finish
                    token: ${{ github.token }}
                    status: ${{ job.status }}
                    env_url: ${{ env.URL }}
                    deployment_id: ${{ steps.deployment.outputs.deployment_id }}
            -   name: logout from registry
                if: always()
                run: docker logout ${{ env.REGISTRY_HOST }}
